import json
import time
import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from webdriver_manager.chrome import ChromeDriverManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Selenium (headless-—Ä–µ–∂–∏–º)
chrome_options = Options()
chrome_options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –±–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
chrome_options.add_argument("--disable-gpu")
chrome_options.add_argument("--window-size=1920,1080")
chrome_options.add_argument("--no-sandbox")
chrome_options.add_argument("--disable-dev-shm-usage")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞
service = Service(ChromeDriverManager().install())
driver = webdriver.Chrome(service=service, options=chrome_options)

# URL YouTube
YOUTUBE_URL = "https://www.youtube.com"

def load_cookies(driver, cookies_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ cookies —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    try:
        with open(cookies_file, "r") as file:
            data = json.load(file)

            if "cookies" not in data:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç cookies.json! –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º 'cookies'.")

            for cookie in data["cookies"]:
                if not all(k in cookie for k in ["name", "value", "domain"]):
                    logging.error(f"–ü—Ä–æ–ø—É—â–µ–Ω—ã –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ cookie: {cookie}")
                    continue

                # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ cookies
                if cookie["domain"].startswith("www.youtube.com"):
                    cookie["domain"] = ".youtube.com"
                if cookie["name"] in ["SID", "__Secure-1PSID", "__Secure-3PSID"]:
                    cookie["secure"] = True  # SID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º
                if cookie["name"] in ["APISID", "SAPISID"]:
                    cookie["httpOnly"] = True  # –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞—â–∏—â–µ–Ω–Ω—ã–º

                driver.add_cookie(cookie)

            logging.info("‚úÖ Cookies –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ.")
            time.sleep(5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    except FileNotFoundError:
        logging.error("‚ùå –§–∞–π–ª cookies.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    except json.JSONDecodeError:
        logging.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ cookies.json! –ü—Ä–æ–≤–µ—Ä—å —Ñ–æ—Ä–º–∞—Ç.")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cookies: {e}")

def check_auth(driver):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ YouTube"""
    driver.get(YOUTUBE_URL)
    time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ "–í–æ–π—Ç–∏" (–µ—Å–ª–∏ –µ—Å—Ç—å ‚Äî –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω)
    if "signin" in driver.page_source.lower():
        logging.error("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏! –ü—Ä–æ–≤–µ—Ä—å cookies.")
        return False
    logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
    return True

def main():
    try:
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º YouTube
        driver.get(YOUTUBE_URL)
        time.sleep(5)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º cookies
        logging.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ cookies...")
        load_cookies(driver, "cookies.json")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if check_auth(driver):
            logging.info("üéâ –í—Å–µ —Ä–∞–±–æ—Ç–∞–µ—Ç! YouTube –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω.")
        else:
            logging.error("‚ö†Ô∏è –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å cookies.")

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∫—Ä–∏–ø—Ç–µ: {e}")

    finally:
        driver.quit()
        logging.info("üõë –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–¥–∞
if __name__ == "__main__":
    main()
